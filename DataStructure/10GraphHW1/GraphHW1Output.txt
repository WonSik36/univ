>testGraph1 begins...
 Adj.List V[0]: 4 -> 1 
 Adj.List V[1]: 4 -> 3 -> 2 -> 0 
 Adj.List V[2]: 3 -> 1 
 Adj.List V[3]: 4 -> 2 -> 1 
 Adj.List V[4]: 3 -> 1 -> 0 
Depth First Search: 0 4 3 2 1 
Breadth First Search: 0 4 1 3 2 
 Adj.List V[0]: 4 -> 1 
 Adj.List V[1]: 4 -> 3 -> 2 -> 0 
 Adj.List V[2]: 3 -> 1 
 Adj.List V[3]: 4 -> 2 -> 1 
 Adj.List V[4]: 3 -> 1 -> 0 
 edgeTo[0..4] = -1 0 1 4 0 
 distTo[0..4] = 0 1 2 2 1 
<testGraph1 ends...
>testGraph2 begins...
Depth First Search: 0 6 4 5 3 2 1 
Breadth First Search: 0 6 2 1 5 4 3 
 Adj.List V[0]: 6 -> 2 -> 1 -> 5 
 Adj.List V[1]: 0 
 Adj.List V[2]: 0 
 Adj.List V[3]: 5 -> 4 
 Adj.List V[4]: 5 -> 6 -> 3 
 Adj.List V[5]: 3 -> 4 -> 0 
 Adj.List V[6]: 0 -> 4 
 edgeTo[0..6] = -1 0 0 5 6 0 0 
 distTo[0..6] = 0 1 1 2 2 1 1 
<testGraph2 ends...
>testGraph3 begins...
 Adj.List V[0]: 6 -> 2 -> 1 -> 5 
 Adj.List V[1]: 0 
 Adj.List V[2]: 0 
 Adj.List V[3]: 5 -> 4 
 Adj.List V[4]: 5 -> 6 -> 3 
 Adj.List V[5]: 3 -> 4 -> 0 
 Adj.List V[6]: 0 -> 4 
 Adj.List V[7]: 8 
 Adj.List V[8]: 7 
 Adj.List V[9]: 11 -> 10 -> 12 
 Adj.List V[10]: 9 
 Adj.List V[11]: 9 -> 12 
 Adj.List V[12]: 11 -> 9 
Starting a new component id=0 at vertex 0
 DFS CC: v=0, id=0
 DFS CC: v=6, id=0
 DFS CC: v=4, id=0
 DFS CC: v=5, id=0
 DFS CC: v=3, id=0
 DFS CC: v=2, id=0
 DFS CC: v=1, id=0
Starting a new component id=1 at vertex 7
 DFS CC: v=7, id=1
 DFS CC: v=8, id=1
Starting a new component id=2 at vertex 9
 DFS CC: v=9, id=2
 DFS CC: v=11, id=2
 DFS CC: v=12, id=2
 DFS CC: v=10, id=2
Find a path from 0 to 3: It should be 0-6-4-5-3
[0] [6] [4] [5] [3] 
<testGraph3 ends...
>testGraph4 begins...
Breadth First Search: 0 2 1 5 3 4 
 Adj.List V[0]: 2 -> 1 -> 5 
 Adj.List V[1]: 0 -> 2 
 Adj.List V[2]: 0 -> 1 -> 3 -> 4 
 Adj.List V[3]: 5 -> 4 -> 2 
 Adj.List V[4]: 3 -> 2 
 Adj.List V[5]: 3 -> 0 
 edgeTo[0..5] = -1 0 0 2 2 0 
 distTo[0..5] = 0 1 1 2 2 1 
The distance from 0 to 4 should be 2; it is 2
The distance from 0 to 5 should be 1; it is 1
The distance from 0 to 3 should be 2; it is 2
The distance from 0 to 0 should be 0; it is 0
<testGraph4 ends...
>testFigure6_16 begins...
 DFS output shoud be 0 1 3 7 4 5 2 6
Depth First Search: 0 1 3 7 4 5 2 6 
 BFS output shoud be 0 1 2 3 4 5 6 7 
Breadth First Search: 0 1 2 3 4 5 6 7 
 Adj.List V[0]: 1 -> 2 
 Adj.List V[1]: 0 -> 3 -> 4 
 Adj.List V[2]: 0 -> 5 -> 6 
 Adj.List V[3]: 1 -> 7 
 Adj.List V[4]: 1 -> 7 
 Adj.List V[5]: 2 -> 7 
 Adj.List V[6]: 2 -> 7 
 Adj.List V[7]: 3 -> 4 -> 5 -> 6 
 edgeTo[0..7] = -1 0 0 1 1 2 2 3 
 distTo[0..7] = 0 1 1 2 2 2 2 3 
The distance from 0 to 2 should be 1; it is 1
The distance from 0 to 5 should be 2; it is 2
The distance from 0 to 3 should be 2; it is 2
The distance from 0 to 7 should be 3; it is 3
<testFigure6_16 ends...
end of graph
